plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlin.android
    alias libs.plugins.kotlin.plugin.compose
    alias libs.plugins.ksp.devtools
    alias libs.plugins.androidx.room
    id 'kotlin-parcelize'
}

android {

    namespace 'com.pydio.android.cells'
    compileSdk 34

    // Gather overrides in a distinct folder for easier maintenance
    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res', 'src/main/res-overrides']
        }
        test {
            java.srcDirs = ['src/test/java']
            res.srcDirs = ['src/test/resources']
        }
        androidTest {
            java.srcDirs = ['src/androidTest/java']
            res.srcDirs = ['src/androidTest/resources']
        }
    }

    defaultConfig {
        // Main legacy App ID
        applicationId "com.pydio.android.Client"
        // Test ID to be able to have the next app along with the production one on a single device
        // applicationId "com.pydio.android.cells.next"

        versionCode ownVersions['cells-app.code'] as int
        versionName ownVersions['cells-app.name']

        minSdkVersion ownVersions['android.sdk.min'] as int
        targetSdkVersion ownVersions['android.sdk.target'] as int

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    signingConfigs {
        release {
            storeFile file(configs['keystore.path'])
            storePassword configs['keystore.pwd']
            keyAlias configs['signkey.alias']
            keyPassword configs['signkey.pwd']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            resValue "string", "app_version",
                    "${defaultConfig.versionName}"

            minifyEnabled true
            // If you haven't already built your app using minifyEnabled for code shrinking,
            // then try that before enabling shrinkResources, because you might need to edit your proguard-rules.pro file
            // to keep classes or methods that are created or invoked dynamically before you start removing resources.
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // See https://developer.android.com/build/shrink-code#android_gradle_plugin_version_41_or_later
            // And you must have this installed in Android Studio https://developer.android.com/studio/projects/install-ndk
            // to also generate and upload the file that enables understanding stack traces seen in production
            // The generated mapping.txt file can than be uploaded on the store following this:
            // https://support.google.com/googleplay/android-developer/answer/9848633#upload_file&zippy=%2Cupload-files-using-play-console
            ndk {
                debugSymbolLevel 'FULL'
            }
        }

        debug {
            versionNameSuffix = '-dev'
            resValue "string", "app_version",
                    "${defaultConfig.versionName}${versionNameSuffix}"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    buildFeatures {
        compose true
        buildConfig true
    }

    room {
        schemaDirectory "$projectDir/schemas"
    }
    lint {
        abortOnError false
    }

    // We do not want that the linter makes builds fail. It is quite extremist by default.
}

dependencies {

    if (useLocalSdkJava) {
        api project(":sdk-java")
        println "##################################"
        println "[DEBUG] Using local java SDK"
    } else {
        println "[WARNING] **Not** using local SDK "
        api "com.pydio.cells:cells-sdk-java:${ownVersions['java.sdk']}"
        println "[DEBUG] Retrieve java sdk from maven repo"
    }

    // Dependencies and versions are defined in the toml catalog in <root>/gradle folder

    // Ensure you include the KSP API if not already added
    implementation libs.symbol.processing.api

    ksp libs.room.compiler
    implementation libs.room.ktx // Optional: For Kotlin Coroutines support

    /* Kotlin and extensions */
    implementation libs.kotlin.stdlib
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android

    /* Koin */
    // Dependency injection with Koin https://insert-koin.io/
    implementation platform(libs.koin.bom)
    implementation libs.koin.core
    implementation libs.koin.android
    implementation libs.koin.androidx.workmanager
    implementation libs.koin.androidx.navigation
    implementation libs.koin.androidx.compose

    // Compose libraries
    // Latest version can be found here: https://developer.android.com/jetpack/compose/bom
    implementation platform(libs.compose.bom)

    /* Androidx */
    implementation libs.androidx.core
    implementation libs.androidx.appcompat
    implementation libs.androidx.core.ktx
    implementation libs.androidx.runtime
    implementation libs.androidx.ui
    implementation libs.androidx.ui.util
    implementation libs.androidx.ui.tooling
    implementation libs.androidx.foundation
    implementation libs.androidx.foundation.layout
    implementation libs.androidx.material3
    implementation libs.androidx.material3.windowsizeclass
    // We use material 3, so remove remaining code that depend on this and remove the dep.
    implementation libs.androidx.material
    // This library is also provided as an API dependency by androidx.compose.material:material.
    // We specify it explicitly so that we won't break when we finally remove material lib from
    // the explicit dependency tree
    implementation libs.androidx.material.icons.core
    // this separate library, the full set of Material icons. Due to the very large size of this lib,
    // Make sure to use R8/Proguard to strip unused icons when including this as a direct dependency.
    // See https://developer.android.com/reference/kotlin/androidx/compose/material/icons/package-summary
    implementation libs.androidx.material.icons.extended
    // Extended UI features: prefs and splash screen
    implementation libs.androidx.preference
    implementation libs.androidx.core.splashscreen
    // Material UI => we still need this to build custom palette based on remote server custom primary color
    implementation libs.material

    // ViewModel
    implementation libs.androidx.lifecycle.viewmodel.ktx
    // Navigation UI
    implementation libs.androidx.navigation.ui.ktx

    // Include extensions the permits integration of Compose with extra TP libraries
    implementation libs.androidx.navigation.compose
    implementation libs.insert.koin.koin.androidx.compose

    // Enable custom data loader for glide library (display images)
    implementation libs.glide
    annotationProcessor libs.glide.compiler
    ksp libs.glide.ksp
    //   implementation libs.glide.ktx
    implementation libs.glide.compose

    // Work for background jobs
    implementation libs.androidx.work.runtime.ktx
    // File transfer
    implementation libs.aws.android.sdk.s3
    // A few extra libraries
    implementation libs.commons.codec
    implementation libs.google.gson
    implementation libs.zxing // Generate QRCodes

    // Tmp addition
    implementation libs.palette.ktx
    // To enable legacy preferences migration
    implementation libs.datastore.preferences

    // Tests
    testImplementation libs.junit
    testImplementation libs.koin.test
    testImplementation libs.koin.test.junit4
    testImplementation libs.kotlinx.coroutines.test
    implementation libs.androidx.junit.ktx

    // Unfortunately, we cannot inherit from "simple" test dependencies.
    androidTestImplementation libs.koin.test
    androidTestImplementation libs.koin.test.junit4
    androidTestImplementation libs.kotlinx.coroutines.test
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.espresso.core

    testImplementation libs.junit
    testImplementation libs.androidx.test.core
}
